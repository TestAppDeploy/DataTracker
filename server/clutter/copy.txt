from flask import Flask, render_template, jsonify, request
from bokeh.plotting import figure, output_file, show
from bokeh.embed import components
from bokeh.models.sources import AjaxDataSource
import io
import requests
import pandas as pd


app = Flask(__name__, static_folder='../static/dist', template_folder='../static/client')

base = "https://api.iextrading.com/1.0/"

def get_last_price(symbol):
    payload = {
        "format": "csv",
        "symbols": symbol
    }
    endpoint = "tops/last"

    raw = requests.get(base + endpoint, params=payload)
    raw = io.BytesIO(raw.content)
    prices_df = pd.read_csv(raw, sep=",")
    prices_df["time"] = pd.to_datetime(prices_df["time"], unit="ms")
    prices_df["display_time"] = prices_df["time"].dt.strftime("%m-%d-%Y %H:%M:%S.%f")

    return prices_df

    data = ColumnDataSource(dict(time=[], display_time=[], price=[]))

def update_price():
    new_price = get_last_price(symbol=TICKER)
    data.stream(dict(time=new_price["time"],
                     display_time=new_price["display_time"],
                     price=new_price["price"]),
                10000)
    return 'a'

def iex_plot():

    plot = figure(plot_width=800,
                        plot_height=400,
                        x_axis_type='datetime',
                        )

    plot.line(source=data, x='time', y='price')
    plot.title.text = "IEX Real Time Price: " + TICKER

    script, div = components(plot)
    return script, div


def make_plot():
    plot = figure(plot_height=250, sizing_mode='scale_width')

    x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    y = [2**v for v in x]

    plot.line(x, y, line_width=4)

    script, div = components(plot)
    return script, div

def make_plot2():
    plot = figure(plot_height=250, sizing_mode='scale_width')

    x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    y = [2**v for v in x]

    plot.line(x, y, line_width=4)

    script, div = components(plot)
    return script, div

def make_plot3():
    plot = figure(plot_height=250, sizing_mode='scale_width')

    x = [0, 10, 25, 35, 42, 52, 66, 77, 88, 92]
    y = [2**v for v in x]

    plot.line(x, y, line_width=4)

    script, div = components(plot)
    return script, div

def chart():

    fruits = ['A', 'P', 'N', 'B', 'V', 'C', 'D']
    plot = figure(x_range=fruits, plot_height=250, title="Company Performance", sizing_mode='scale_width')
    plot.vbar(x=fruits, top=[5, 3, 4, 2, 4, 6], width=0.9)

    plot.xgrid.grid_line_color = None
    plot.y_range.start = 0

    script, div = components(plot)
    return script, div

    #return render_template("chart.html",)

x, y = 0, 0

@app.route('/data/', methods=['POST'])
def data():
    global x, y
    x += 1
    y = x//1.3
    return jsonify(x=[x], y=[y])

def make_ajax_plot():
    source = AjaxDataSource(data_url=request.url_root + 'data/',
                            polling_interval=2000, mode='append')

    source.data = dict(x=[], y=[])

    plot = figure(x_range=[0,1000], y_range=[10, 2000], plot_height=250, sizing_mode='scale_width')
    plot.line('x', 'y', source=source, line_width=4)

    script, div = components(plot)
    return script, div

@app.route('/dashboard/')
def show_dashboard():
    plots = []
    plots.append(make_ajax_plot())
    plots.append(make_plot())
    plots.append(make_plot2())
    plots.append(make_plot3())
    plots.append(chart())
    plots.append(iex_plot())

    return render_template('index.html', plots=plots)

if __name__ == '__main__':
    app.run(debug=True)
